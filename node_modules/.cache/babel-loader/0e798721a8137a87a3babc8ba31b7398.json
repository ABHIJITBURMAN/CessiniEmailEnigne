{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\New folder\\\\CessiniEmailEnigne\\\\src\\\\components\\\\Dashboard\\\\LoadedCampaigns\\\\loadedCampForm.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport store from '../../../store/store';\nimport { storeCampaign, updateCampaign } from '../../../actions';\nimport { useSpring, animated } from 'react-spring';\nimport axios from 'axios';\nimport campStyle from '../../../css_modules/form.module.css';\nimport Back from '../../../assets/LeftArrow';\nimport Add from '../../../assets/Add';\n\nconst LoadedCampForm = ({\n  newCampaignData,\n  setNewCampaignData,\n  loadTheTemplate,\n  loaded,\n  setLoaded\n}) => {\n  const [emailCSV, setEmailCSV] = useState([]);\n  const [upNexitButtonStyle, setUpNexitButtonStyle] = useSpring(() => ({\n    text: \"Update & Exit\",\n    backgroundColor: \"#365194ff\"\n  }));\n  const [upNsendButtonStyle, setUpNsendButtonStyle] = useSpring(() => ({\n    text: \"Update & Send\",\n    backgroundColor: \"#365194ff\"\n  }));\n  useEffect(() => {\n    const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null;\n\n    if (loadedCamp) {\n      if (!loaded) {\n        console.log(\"getting into if\");\n        const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp);\n        setNewCampaignData(first[0]);\n        setLoaded(true);\n      }\n    }\n\n    setEmailCSV(store.getState().emailList);\n  }, []);\n  const options = emailCSV ? emailCSV.map(list => /*#__PURE__*/React.createElement(\"option\", {\n    key: list.id,\n    value: list.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, list.name)) : null;\n  const camNameRef = useRef(null);\n  const SenderNameRef = useRef(null);\n  const emailSubRef = useRef(null);\n  const SenderEmailRef = useRef(null);\n  console.log(newCampaignData.campName);\n  const {\n    push\n  } = useHistory(null);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topNavCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashBodyMainCam  subWrapperCam\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${campStyle.loadedCamFormHolder}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formFields  Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leftFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"camName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, \"Campaign Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.name,\n    ref: camNameRef,\n    type: \"text\",\n    id: \"camName\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 33\n    }\n  }, \"Sender Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_name,\n    ref: SenderNameRef,\n    type: \"text\",\n    id: \"SenderName\",\n    name: \"SenderName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailSub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 33\n    }\n  }, \"Email Subject\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.email_subject,\n    ref: emailSubRef,\n    type: \"text\",\n    id: \"emailSub\",\n    name: \"camName\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      email_subject: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rightFields Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"SenderEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }, \"Sender Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: newCampaignData.sender_email,\n    ref: SenderEmailRef,\n    type: \"text\",\n    id: \"SenderEmail\",\n    name: \"SenderEmail\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      sender_email: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 33\n    }\n  }, \"Email Attachment\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 33\n    }\n  }, newCampaignData.emailAttachment ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 41\n    }\n  }, newCampaignData.emailAttachment.name) : /*#__PURE__*/React.createElement(Add, {\n    height: \"80%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"emailList\",\n    onChange: e => setNewCampaignData({ ...newCampaignData,\n      emailAttachment: e.target.files[0]\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailLists\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  }, \"Email List\"), console.log(newCampaignData.camp_emails), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"emailLists\",\n    name: \"emailLists\",\n    value: newCampaignData.camp_emails,\n    onChange: e => {\n      console.log(\"hey hey\", newCampaignData.camp_emails);\n      setNewCampaignData({ ...newCampaignData,\n        camp_emails: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, options)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subField Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"emailBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 33\n    }\n  }, \"Email Body\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${campStyle.openBodyButton}`,\n    onClick: () => {\n      push(\"/dashboard/loadedcamp/maileditor\");\n      setTimeout(() => {\n        loadTheTemplate(newCampaignData.temp_json);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, \"Open Mail Body\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formButtons Fields\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"backButton\",\n    onClick: () => push(\"/dashboard\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Back, {\n    fill: \"#B1B1B1\",\n    width: \"50%\",\n    height: \"50%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(animated.div, {\n    className: \"sendButton Fields formButtonsCam\",\n    style: upNsendButtonStyle,\n    onClick: () => {\n      //Updating\n      setUpNsendButtonStyle({\n        transform: \"scaleX(1)\",\n        text: \"Updating...\",\n        backgroundColor: \"#389685ff\"\n      });\n      setTimeout(() => {\n        let dataForm = new FormData();\n        let Jda = JSON.stringify(newCampaignData.temp_json);\n        dataForm.append(\"name\", newCampaignData.name);\n        dataForm.append(\"sender_name\", newCampaignData.sender_name);\n        dataForm.append(\"sender_email\", newCampaignData.sender_email);\n        dataForm.append(\"email_subject\", newCampaignData.email_subject);\n        dataForm.append(\"my_customer\", store.getState().userData.id);\n        dataForm.append(\"camp_emails\", newCampaignData.camp_emails);\n        dataForm.append(\"email_message\", \"will see\");\n        dataForm.append(\"temp_json\", Jda);\n        dataForm.append(\"ht\", newCampaignData.ht);\n\n        if (typeof !newCampaignData.attachment === 'string') {\n          dataForm.append(\"attachment\", newCampaignData.attachment);\n        }\n\n        axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`, dataForm).then(res => {\n          console.log(res);\n          console.log(\"reached res\");\n          store.dispatch(updateCampaign(store.getState().userData.id));\n          setUpNsendButtonStyle({\n            text: \"Sending...\",\n            backgroundColor: \"#389685ff\"\n          });\n          axios.post(`https://emailengine2020.herokuapp.com/campid/${store.getState().loadedCampaign.campId}/`).then(res => {\n            setTimeout(() => {\n              setUpNsendButtonStyle({\n                text: \"Sent!\",\n                backgroundColor: \"#656565ff\"\n              });\n            }, 1000);\n            setTimeout(() => {\n              push('/dashboard');\n            }, 1300);\n          });\n        }).catch(er => {\n          console.log(er);\n          console.log(\"reached er\");\n\n          if (er.response) {\n            console.log(er.response.data);\n          }\n        });\n      }, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, upNsendButtonStyle.text), /*#__PURE__*/React.createElement(animated.div, {\n    className: \"createButton Fields formButtonsCam\",\n    style: upNexitButtonStyle,\n    onClick: () => {\n      setUpNexitButtonStyle({\n        transform: \"scaleX(1)\",\n        text: \"Updating...\",\n        backgroundColor: \"#389685ff\"\n      });\n      setTimeout(() => {\n        //console.log(newCampaignData.ht)\n        let dataForm = new FormData();\n        let Jda = JSON.stringify(newCampaignData.temp_json);\n        dataForm.append(\"name\", newCampaignData.name);\n        dataForm.append(\"sender_name\", newCampaignData.sender_name);\n        dataForm.append(\"sender_email\", newCampaignData.sender_email);\n        dataForm.append(\"email_subject\", newCampaignData.email_subject);\n        dataForm.append(\"my_customer\", store.getState().userData.id);\n        dataForm.append(\"camp_emails\", newCampaignData.camp_emails);\n        dataForm.append(\"email_message\", \"will see\");\n        dataForm.append(\"temp_json\", Jda);\n        dataForm.append(\"ht\", newCampaignData.ht);\n\n        if (typeof !newCampaignData.attachment === 'string') {\n          dataForm.append(\"attachment\", newCampaignData.attachment);\n        }\n\n        axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`, dataForm).then(res => {\n          console.log(res);\n          console.log(\"reached res\");\n          store.dispatch(updateCampaign(store.getState().userData.id));\n          setTimeout(() => {\n            setUpNexitButtonStyle({\n              text: \"Done!\",\n              backgroundColor: \"#365194ff\"\n            });\n          }, 1000);\n          setTimeout(() => {\n            push('/dashboard');\n          }, 1300);\n        }).catch(er => {\n          console.log(er);\n          console.log(\"reached er\");\n\n          if (er.response) {//console.log(er.response.data)\n            // if (er.response.status === 500) {\n            //     document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click()\n            //     // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\n            // }\n          }\n        });\n      }, 0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, upNexitButtonStyle.text)))));\n};\n\nexport default LoadedCampForm;","map":{"version":3,"sources":["C:/Users/PC/Desktop/New folder/CessiniEmailEnigne/src/components/Dashboard/LoadedCampaigns/loadedCampForm.js"],"names":["React","useEffect","useState","useRef","useHistory","store","storeCampaign","updateCampaign","useSpring","animated","axios","campStyle","Back","Add","LoadedCampForm","newCampaignData","setNewCampaignData","loadTheTemplate","loaded","setLoaded","emailCSV","setEmailCSV","upNexitButtonStyle","setUpNexitButtonStyle","text","backgroundColor","upNsendButtonStyle","setUpNsendButtonStyle","loadedCamp","getState","loadedCampaign","campId","console","log","first","campaigns","filter","camp","id","emailList","options","map","list","name","camNameRef","SenderNameRef","emailSubRef","SenderEmailRef","campName","push","loadedCamFormHolder","e","target","value","sender_name","email_subject","sender_email","emailAttachment","files","camp_emails","openBodyButton","setTimeout","temp_json","transform","dataForm","FormData","Jda","JSON","stringify","append","userData","ht","attachment","put","then","res","dispatch","post","catch","er","response","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport store from '../../../store/store'\r\nimport { storeCampaign, updateCampaign } from '../../../actions'\r\nimport { useSpring, animated } from 'react-spring'\r\nimport axios from 'axios'\r\nimport campStyle from '../../../css_modules/form.module.css'\r\nimport Back from '../../../assets/LeftArrow'\r\nimport Add from '../../../assets/Add'\r\n\r\nconst LoadedCampForm = ({ newCampaignData, setNewCampaignData, loadTheTemplate, loaded, setLoaded }) => {\r\n    const [emailCSV, setEmailCSV] = useState([])\r\n\r\n    const [upNexitButtonStyle, setUpNexitButtonStyle] = useSpring(() => ({ text: \"Update & Exit\", backgroundColor: \"#365194ff\" }))\r\n    const [upNsendButtonStyle, setUpNsendButtonStyle] = useSpring(() => ({ text: \"Update & Send\", backgroundColor: \"#365194ff\" }))\r\n\r\n    useEffect(() => {\r\n        const loadedCamp = store.getState().loadedCampaign ? store.getState().loadedCampaign.campId : null\r\n        if (loadedCamp) {\r\n            if (!loaded) {\r\n                console.log(\"getting into if\")\r\n                const first = store.getState().campaigns.filter(camp => camp.id === loadedCamp)\r\n                setNewCampaignData(first[0])\r\n                setLoaded(true)\r\n            }\r\n        }\r\n        setEmailCSV(store.getState().emailList)\r\n    }, [])\r\n\r\n    const options = emailCSV ? emailCSV.map(list =>\r\n        <option key={list.id} value={list.id}>{list.name}</option>\r\n    ) : null;\r\n\r\n\r\n    const camNameRef = useRef(null)\r\n    const SenderNameRef = useRef(null)\r\n    const emailSubRef = useRef(null)\r\n    const SenderEmailRef = useRef(null)\r\n\r\n    console.log(newCampaignData.campName)\r\n\r\n\r\n    const { push } = useHistory(null)\r\n    return (\r\n        <>\r\n            <div className=\"topNavCam  subWrapperCam\">\r\n\r\n\r\n            </div>\r\n            <div className=\"dashBodyMainCam  subWrapperCam\">\r\n                <div className={`${campStyle.loadedCamFormHolder}`}>\r\n                    <form className=\"formFields  Fields\">\r\n                        <div className=\"leftFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"camName\">Campaign Name</label>\r\n                                <input defaultValue={newCampaignData.name} ref={camNameRef} type=\"text\" id=\"camName\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderName\">Sender Name</label>\r\n                                <input defaultValue={newCampaignData.sender_name} ref={SenderNameRef} type=\"text\" id=\"SenderName\" name=\"SenderName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_name: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailSub\">Email Subject</label>\r\n                                <input defaultValue={newCampaignData.email_subject} ref={emailSubRef} type=\"text\" id=\"emailSub\" name=\"camName\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, email_subject: e.target.value })}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"rightFields Fields\">\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"SenderEmail\">Sender Email</label>\r\n                                <input defaultValue={newCampaignData.sender_email} ref={SenderEmailRef} type=\"text\" id=\"SenderEmail\" name=\"SenderEmail\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, sender_email: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailList\">Email Attachment</label>\r\n                                <div>\r\n                                    {newCampaignData.emailAttachment ?\r\n                                        <div>{newCampaignData.emailAttachment.name}</div> :\r\n                                        <Add height=\"80%\" />}\r\n                                    <input type=\"file\" id=\"emailList\"\r\n                                        onChange={e => setNewCampaignData({ ...newCampaignData, emailAttachment: e.target.files[0] })}\r\n                                    />\r\n                                </div>\r\n                                {/* <input type=\"file\" id=\"emailList\"\r\n                                    onChange={e => setNewCampaignData({ ...newCampaignData, attachment: e.target.files[0] })}\r\n                                /> */}\r\n                            </div>\r\n                            <div className=\"subField\">\r\n                                <label htmlFor=\"emailLists\">Email List</label>\r\n                                {console.log(newCampaignData.camp_emails)}\r\n                                <select id=\"emailLists\" name=\"emailLists\" value={newCampaignData.camp_emails}\r\n                                    onChange={e => {\r\n                                        console.log(\"hey hey\", newCampaignData.camp_emails)\r\n                                        setNewCampaignData({ ...newCampaignData, camp_emails: e.target.value })\r\n                                    }\r\n                                    }\r\n                                >\r\n                                    {options}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"subField Fields\">\r\n                                <label htmlFor=\"emailBody\">Email Body</label>\r\n                                <div className={`${campStyle.openBodyButton}`}\r\n                                    onClick={() => {\r\n\r\n                                        push(\"/dashboard/loadedcamp/maileditor\")\r\n                                        setTimeout(() => {\r\n                                            loadTheTemplate(newCampaignData.temp_json)\r\n                                        }, 500)\r\n                                    }}\r\n                                >\r\n                                    Open Mail Body\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <div className=\"formButtons Fields\">\r\n                        <div className=\"backButton\"\r\n                            onClick={() => push(\"/dashboard\")}\r\n                        >\r\n                            <Back fill={\"#B1B1B1\"} width={\"50%\"} height={\"50%\"}></Back>\r\n                        </div>\r\n                        <animated.div className=\"sendButton Fields formButtonsCam\"\r\n                            style={upNsendButtonStyle}\r\n                            onClick={() => {\r\n                                //Updating\r\n                                setUpNsendButtonStyle({ transform: \"scaleX(1)\", text: \"Updating...\", backgroundColor: \"#389685ff\" })\r\n                                setTimeout(() => {\r\n                                    let dataForm = new FormData\r\n                                    let Jda = JSON.stringify(newCampaignData.temp_json)\r\n                                    dataForm.append(\"name\", newCampaignData.name)\r\n                                    dataForm.append(\"sender_name\", newCampaignData.sender_name)\r\n                                    dataForm.append(\"sender_email\", newCampaignData.sender_email)\r\n                                    dataForm.append(\"email_subject\", newCampaignData.email_subject)\r\n                                    dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                    dataForm.append(\"camp_emails\", newCampaignData.camp_emails)\r\n                                    dataForm.append(\"email_message\", \"will see\")\r\n                                    dataForm.append(\"temp_json\", Jda)\r\n                                    dataForm.append(\"ht\", newCampaignData.ht)\r\n                                    if (typeof (!newCampaignData.attachment) === 'string') {\r\n                                        dataForm.append(\"attachment\", newCampaignData.attachment)\r\n                                    }\r\n                                    axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`,\r\n                                        dataForm\r\n                                    ).then(res => {\r\n                                        console.log(res)\r\n                                        console.log(\"reached res\")\r\n\r\n                                        store.dispatch(updateCampaign(store.getState().userData.id))\r\n\r\n                                        setUpNsendButtonStyle({ text: \"Sending...\", backgroundColor: \"#389685ff\" })\r\n                                        axios.post(`https://emailengine2020.herokuapp.com/campid/${store.getState().loadedCampaign.campId}/`).then(res => {\r\n                                            setTimeout(() => { setUpNsendButtonStyle({ text: \"Sent!\", backgroundColor: \"#656565ff\" }) }, 1000)\r\n                                            setTimeout(() => { push('/dashboard') }, 1300)\r\n                                        })\r\n                                    })\r\n                                        .catch(er => {\r\n                                            console.log(er)\r\n                                            console.log(\"reached er\")\r\n                                            if (er.response) {\r\n                                                console.log(er.response.data)\r\n                                            }\r\n                                        }\r\n                                        )\r\n\r\n                                }, 0)\r\n                            }}\r\n                        >\r\n                            {upNsendButtonStyle.text}\r\n                        </animated.div>\r\n                        <animated.div className=\"createButton Fields formButtonsCam\"\r\n                            style={upNexitButtonStyle}\r\n                            onClick={() => {\r\n                                setUpNexitButtonStyle({ transform: \"scaleX(1)\", text: \"Updating...\", backgroundColor: \"#389685ff\" })\r\n                                setTimeout(() => {\r\n                                    //console.log(newCampaignData.ht)\r\n                                    let dataForm = new FormData\r\n                                    let Jda = JSON.stringify(newCampaignData.temp_json)\r\n                                    dataForm.append(\"name\", newCampaignData.name)\r\n                                    dataForm.append(\"sender_name\", newCampaignData.sender_name)\r\n                                    dataForm.append(\"sender_email\", newCampaignData.sender_email)\r\n                                    dataForm.append(\"email_subject\", newCampaignData.email_subject)\r\n                                    dataForm.append(\"my_customer\", store.getState().userData.id)\r\n                                    dataForm.append(\"camp_emails\", newCampaignData.camp_emails)\r\n                                    dataForm.append(\"email_message\", \"will see\")\r\n                                    dataForm.append(\"temp_json\", Jda)\r\n                                    dataForm.append(\"ht\", newCampaignData.ht)\r\n                                    if (typeof (!newCampaignData.attachment) === 'string') {\r\n                                        dataForm.append(\"attachment\", newCampaignData.attachment)\r\n                                    }\r\n                                    axios.put(`https://emailengine2020.herokuapp.com/camprud/${store.getState().loadedCampaign.campId}/`,\r\n                                        dataForm\r\n                                    ).then(res => {\r\n                                        console.log(res)\r\n                                        console.log(\"reached res\")\r\n\r\n                                        store.dispatch(updateCampaign(store.getState().userData.id))\r\n\r\n                                        setTimeout(() => {\r\n                                            setUpNexitButtonStyle({ text: \"Done!\", backgroundColor: \"#365194ff\" })\r\n\r\n                                        }, 1000)\r\n                                        setTimeout(() => { push('/dashboard') }, 1300)\r\n                                    })\r\n                                        .catch(er => {\r\n                                            console.log(er)\r\n                                            console.log(\"reached er\")\r\n                                            if (er.response) {\r\n                                                //console.log(er.response.data)\r\n                                                // if (er.response.status === 500) {\r\n                                                //     document.getElementsByClassName(\"addEmailList topButtonsCam subWrapperCam\")[0].click()\r\n                                                //     // axios.post(\"https://emailengine2020.herokuapp.com/newcampaign/\", dataForm).then(res => res.data)\r\n                                                // }\r\n                                            }\r\n                                        }\r\n                                        )\r\n\r\n                                }, 0)\r\n                            }}\r\n                        >\r\n                            {upNexitButtonStyle.text}\r\n                        </animated.div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoadedCampForm;"]},"metadata":{},"sourceType":"module"}